import os

from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeExpiredError

from client.constants import SESSIONS_DIR
from db.utils import get_telegram_account, get_active_channels, \
    get_session_file_path
from client.listeners import add_channel_listener

_clients = {}  # user_id -> TelegramClient (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
_pending_clients = {}  # user_id -> TelegramClient (–∂–¥—É—â–∏–µ –∫–æ–¥)


async def start_user_client(user_id, code=None):
    account = get_telegram_account(user_id)
    if not account:
        raise RuntimeError("Telegram account not found")

    session_path = get_session_file_path(account.session_name)
    client = TelegramClient(
        session_path,
        account.api_id,
        account.api_hash,
        system_version="4.16.30-vxTEST"
    )
    await client.connect()
    if not await client.is_user_authorized():
        if code is None:
            await client.send_code_request(account.phone)
            _pending_clients[user_id] = client
            return 'awaiting_code'

        try:
            client = _pending_clients.pop(user_id, client)
            await client.sign_in(account.phone, code)
        except PhoneCodeExpiredError:
            raise RuntimeError("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. "
                               "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∞–∫–∫–∞—É–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∏—à–µ—Ç–µ –≤ –±–æ—Ç–∞. "
                               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π Telegram-–∞–∫–∫–∞—É–Ω—Ç.")
        except SessionPasswordNeededError:
            raise RuntimeError("üîê –ê–∫–∫–∞—É–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å (2FA), –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º: {e}")

    # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    _clients[user_id] = client

    channels = get_active_channels(user_id)
    for channel in channels:
        await add_channel_listener(channel.chat_id, client)

    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–ª—è user_id={user_id} –∑–∞–ø—É—â–µ–Ω.")
    return 'ok'


def get_user_client(user_id):
    return _clients.get(user_id)


def is_user_pending(user_id):
    return user_id in _pending_clients


async def stop_user_client(user_id):
    """
    –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è).
    """
    client = _clients.pop(user_id, None)
    if client:
        await client.disconnect()
        print(f"üõë –ö–ª–∏–µ–Ω—Ç –¥–ª—è user_id={user_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
