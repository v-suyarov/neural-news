from aiogram.filters import Command
from aiogram.types import Message

from client.client_manager import get_user_client
from client.client_manager import start_user_client
from .bot_instance import dp
from db.utils import add_channel, remove_channel_by_id, get_active_channels, \
    fetch_channel_title, remove_tag_from_target_channel, \
    add_tag_to_target_channel, get_target_channels, remove_target_channel, \
    add_target_channel, get_tags_for_target_channel, get_all_tags, \
    get_or_create_user, get_rewrite_prompt, set_rewrite_prompt, \
    set_telegram_account, get_telegram_account, get_user
from client.listeners import add_channel_listener, remove_channel_listener


@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "ü§ñ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!* –í–æ—Ç —á—Ç–æ —è —É–º–µ—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n"

        "üîê *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è:*\n"
        "‚Ä¢ `/set_listener <api_id> <api_hash> <phone>` ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å Telegram-–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ `/get_listener` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª—É—à–∞—Ç–µ–ª–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n\n"

        "üì• *–†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:*\n"
        "‚Ä¢ `/add_channel <chat_id>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ `/remove_channel <chat_id>` ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ `/list_channels` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏\n\n"

        "üéØ *–†–∞–±–æ—Ç–∞ —Å —Ç–∞—Ä–≥–µ—Ç–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏:*\n"
        "‚Ä¢ `/add_target_channel <chat_id>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ `/remove_target_channel <chat_id>` ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ `/list_target_channels` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞—Ä–≥–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã\n\n"

        "üè∑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏ —Ç–∞—Ä–≥–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:*\n"
        "‚Ä¢ `/add_target_tag <chat_id> <—Ç–µ–≥>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π —Ç–µ–≥ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ `/remove_target_tag <chat_id> <—Ç–µ–≥>` ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –∏–∑ —Ç–∞—Ä–≥–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ `/list_target_tags <chat_id>` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–≥–∏, —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ `/list_tags` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏\n\n"

        "‚úèÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:*\n"
        "‚Ä¢ `/set_rewrite_prompt <chat_id> <–ø—Ä–æ–º—Ç>` ‚Äî –∑–∞–¥–∞—Ç—å –ø—Ä–æ–º—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ `/get_rewrite_prompt <chat_id>` ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç –∫–∞–Ω–∞–ª–∞\n"
    )
    await message.answer(text, parse_mode="Markdown")


@dp.message(Command("add_channel"))
async def cmd_add_channel(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer(
            "‚ö†Ô∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è /set_listener")
        return

    title = await fetch_channel_title(chat_id, client)

    if add_channel(chat_id, user.id, title=title):
        await add_channel_listener(chat_id, client)
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.message(Command("remove_channel"))
async def cmd_remove_channel(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    remove_channel_by_id(chat_id, user.id)
    await remove_channel_listener(chat_id)
    await message.answer(f"üóë –ö–∞–Ω–∞–ª {chat_id} —É–¥–∞–ª—ë–Ω.")


@dp.message(Command("list_channels"))
async def cmd_list_channels(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    channels = get_active_channels(user.id)
    if not channels:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(
        f"‚Ä¢ {ch.chat_id} ({ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'})" for ch in channels
    )
    await message.answer(text)


@dp.message(Command("add_target_channel"))
async def cmd_add_target_channel(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer(
            "‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /auth.")
        return

    title = await fetch_channel_title(chat_id, client)

    if add_target_channel(chat_id, user.id, title=title):
        await message.answer(f"‚úÖ –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.message(Command("remove_target_channel"))
async def cmd_remove_target_channel(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    remove_target_channel(chat_id, user.id)
    await message.answer(f"üóë –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id} —É–¥–∞–ª—ë–Ω.")


@dp.message(Command("list_target_channels"))
async def cmd_list_target_channels(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    channels = get_target_channels(user.id)
    if not channels:
        await message.answer("‚ùå –ù–µ—Ç —Ç–∞—Ä–≥–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    text = "üéØ –¢–∞—Ä–≥–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(
        f"‚Ä¢ {ch.chat_id} ({ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'})" for ch in channels
    )
    await message.answer(text)


@dp.message(Command("add_target_tag"))
async def cmd_add_target_tag(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ —Ç–µ–≥!")
        return

    try:
        chat_id = int(args[1])
        tag_name = args[2]
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    if add_tag_to_target_channel(chat_id, user.id, tag_name):
        await message.answer(f"‚úÖ –¢–µ–≥ '{tag_name}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–Ω–∞–ª—É {chat_id}.")
    else:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥.")


@dp.message(Command("remove_target_tag"))
async def cmd_remove_target_tag(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ —Ç–µ–≥!")
        return

    try:
        chat_id = int(args[1])
        tag_name = args[2]
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    if remove_tag_from_target_channel(chat_id, user.id, tag_name):
        await message.answer(f"üóë –¢–µ–≥ '{tag_name}' —É–¥–∞–ª—ë–Ω —É –∫–∞–Ω–∞–ª–∞ {chat_id}.")
    else:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥.")


@dp.message(Command("list_target_tags"))
async def cmd_list_target_tags(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    tags = get_tags_for_target_channel(chat_id, user.id)
    if not tags:
        await message.answer(f"‚ùå –£ –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ—Ç —Ç–µ–≥–æ–≤.")
        return

    text = "üè∑ –¢–µ–≥–∏ –∫–∞–Ω–∞–ª–∞:\n" + "\n".join(f"‚Ä¢ {tag.name}" for tag in tags)
    await message.answer(text)


@dp.message(Command("list_tags"))
async def cmd_list_tags(message: Message):
    tags = get_all_tags()
    if not tags:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤.")
        return

    text = "üè∑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏:\n" + "\n".join(f"‚Ä¢ {tag.name}" for tag in tags)
    await message.answer(text, parse_mode="Markdown")


@dp.message(Command("set_rewrite_prompt"))
async def cmd_set_rewrite_prompt(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º—Ç–∞!")
        return

    try:
        chat_id = int(args[1])
        prompt = args[2]
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    if set_rewrite_prompt(chat_id, user.id, prompt):
        await message.answer(f"‚úÖ –ü—Ä–æ–º—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command("get_rewrite_prompt"))
async def cmd_get_rewrite_prompt(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    prompt = get_rewrite_prompt(chat_id, user.id)
    if prompt:
        await message.answer(f"üìú –ü—Ä–æ–º—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}:\n\n{prompt}")
    else:
        await message.answer(f"‚ÑπÔ∏è –ü—Ä–æ–º—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


@dp.message(Command("code"))
async def cmd_code(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    code = message.text.split(maxsplit=1)[1] if len(
        message.text.split()) > 1 else None

    if not code:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ Telegram.")
        return

    try:
        result = await start_user_client(user.id, code=code)
        if result == 'ok':
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {e}")


@dp.message(Command("set_listener"))
async def cmd_set_listener(message: Message):
    args = message.text.split(maxsplit=4)
    if len(args) < 4:
        await message.answer(
            "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /set_listener <api_id> <api_hash> <phone>")
        return
    print(1)
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    print(1)
    try:
        api_id = int(args[1])
        api_hash = args[2]
        phone = args[3]
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    print(1)
    set_telegram_account(user.id, api_id, api_hash, phone)
    print(1)
    try:
        result = await start_user_client(user.id)
        if result == 'awaiting_code':
            await message.answer(
                "üì© –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:\n`/code <–≤–∞—à_–∫–æ–¥>`",
                parse_mode="Markdown")
        else:
            await message.answer("‚úÖ –°–ª—É—à–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª—É—à–∞—Ç–µ–ª—è: {e}")


@dp.message(Command("get_listener"))
async def cmd_get_listener(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    account = get_telegram_account(user.id)
    if not account:
        await message.answer("‚ùå –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer("‚ö†Ô∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /set_listener.")
        return

    try:
        dialogs = await client.get_dialogs()
        channels = [
            dialog for dialog in dialogs
            if getattr(dialog.entity, "megagroup", False)
               or getattr(dialog.entity, "broadcast", False)
        ]

        if not channels:
            await message.answer("‚ÑπÔ∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ.")
            return

        text = (
                f"üë§ –¢–µ–∫—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å:\n"
                f"‚Ä¢ ID: {user.telegram_id}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {account.phone}\n"
                f"üì° –ö–∞–Ω–∞–ª—ã:\n"
                + "\n".join(
                f"‚Ä¢ `{ch.entity.id}` ‚Äî {ch.name}" for ch in channels)
        )

        await message.answer(text)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
