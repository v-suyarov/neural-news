from aiogram.filters import Command
from aiogram.types import Message
from telethon.errors import UserNotParticipantError, ChatAdminRequiredError, \
    ChannelInvalidError
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from client.client_manager import get_user_client
from client.client_manager import start_user_client
from bot.bot_instance import dp
from db.utils import add_channel, remove_channel_by_id, get_active_channels, \
    fetch_channel_title, remove_tag_from_target_channel, \
    add_tag_to_target_channel, get_target_channels, remove_target_channel, \
    add_target_channel, get_tags_for_target_channel, get_all_tags, \
    get_or_create_user, get_rewrite_prompt, set_rewrite_prompt, \
    set_telegram_account, get_telegram_account, get_user, set_include_image, \
    get_include_image, set_image_prompt, get_image_prompt
from client.listeners import add_channel_listener, remove_channel_listener

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery


class ListenerSetup(StatesGroup):
    waiting_api_id = State()
    waiting_api_hash = State()
    waiting_phone = State()
    waiting_code = State()



class SourceAddState(StatesGroup):
    waiting_for_chat_id = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è",
                              callback_data="menu_listener")],
        [InlineKeyboardButton(text="üì• –ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏",
                              callback_data="menu_sources")],
        [InlineKeyboardButton(text="üéØ –¢–∞—Ä–≥–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
                              callback_data="menu_targets")],
        [InlineKeyboardButton(text="üè∑ –¢–µ–≥–∏", callback_data="menu_tags")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ—Ä–∞–π—Ç", callback_data="menu_rewrite")],
        [InlineKeyboardButton(text="üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                              callback_data="menu_images")],
    ])


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )


def get_sources_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                              callback_data="source_add")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",
                              callback_data="source_remove")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",
                              callback_data="source_list")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])


def get_listener_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è",
                              callback_data="listener_show")],
        [InlineKeyboardButton(text="‚ûï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è",
                              callback_data="listener_set")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])


@dp.callback_query()
async def handle_callback(query: CallbackQuery, state: FSMContext):
    data = query.data
    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)

    if data == "menu_main":
        await show_main_menu(query)

    elif data == "menu_sources":
        await show_sources_menu(query)

    elif data == "source_list":
        await show_source_list(query, user)
    elif data == "menu_listener":
        await query.message.edit_text(
            "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_listener_menu()
        )
        await query.answer()
    elif data == "source_add":
        await show_source_add_instruction(query, state)
    elif data == "listener_set":
        await query.message.edit_text(
            "üõ† –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º —Å–ª—É—à–∞—Ç–µ–ª—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à `api_id`:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                      callback_data="menu_listener")]
            ]),
            parse_mode="Markdown"
        )
        await state.set_state(ListenerSetup.waiting_api_id)
        await query.answer()
    elif data == "listener_show":
        account = get_telegram_account(user.id)
        client = get_user_client(user.id)

        if not account:
            await query.message.edit_text("‚ùå –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.",
                                          reply_markup=get_listener_menu())
            await query.answer()
            return

        if not client:
            await query.message.edit_text(
                "‚ö†Ô∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_listener_menu())
            await query.answer()
            return

        try:
            dialogs = await client.get_dialogs()
            channels = [
                dialog for dialog in dialogs
                if getattr(dialog.entity, "megagroup", False) or getattr(
                    dialog.entity, "broadcast", False)
            ]

            text = (
                    f"üë§ –¢–µ–∫—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å:\n"
                    f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: `{account.phone}`\n"
                    f"üì° –ö–∞–Ω–∞–ª—ã:\n"
                    + "\n".join(
                f"‚Ä¢ `{ch.entity.id}` ‚Äî {ch.name}" for ch in channels)
            )
            await query.message.edit_text(text,
                                          reply_markup=get_listener_menu(),
                                          parse_mode="Markdown")

        except Exception as e:
            await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
                                          reply_markup=get_listener_menu())
        await query.answer()
    elif data == "source_remove":
        await show_source_removal_menu(query, user)

    elif data.startswith("remove_source_"):
        try:
            chat_id = int(data.replace("remove_source_", ""))
            await handle_source_removal(query, user, chat_id)
        except ValueError:
            await query.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π chat_id")


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(query: CallbackQuery):
    await query.message.edit_text("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  reply_markup=get_main_menu())
    await query.answer()


# –ú–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
async def show_sources_menu(query: CallbackQuery):
    await query.message.edit_text("üì• –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:",
                                  reply_markup=get_sources_menu())
    await query.answer()


# –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
async def show_source_list(query: CallbackQuery, user):
    channels = get_active_channels(user.id)
    if not channels:
        text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n" + "\n".join(
            f"‚Ä¢ `{ch.chat_id}` ‚Äî {ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" for ch in
            channels
        )
    await query.message.edit_text(text, reply_markup=get_sources_menu(),
                                  parse_mode="Markdown")
    await query.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
async def show_source_add_instruction(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è üì•\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç—É–¥–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∏ –æ–Ω –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                     callback_data="menu_sources"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                     callback_data="menu_main")
            ]
        ])
    )
    await state.set_state(SourceAddState.waiting_for_chat_id)
    await query.answer()


@dp.message(ListenerSetup.waiting_api_id)
async def set_api_id(message: Message, state: FSMContext):
    try:
        api_id = int(message.text.strip())
        await state.update_data(api_id=api_id)
        await state.set_state(ListenerSetup.waiting_api_hash)
        await message.answer("‚úÖ API ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ `api_hash`:",
                             parse_mode="Markdown")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@dp.message(ListenerSetup.waiting_api_hash)
async def set_api_hash(message: Message, state: FSMContext):
    await state.update_data(api_hash=message.text.strip())
    await state.set_state(ListenerSetup.waiting_phone)
    await message.answer(
        "üìû –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...",
        parse_mode="Markdown")


@dp.message(ListenerSetup.waiting_phone)
async def set_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    data = await state.get_data()
    api_id = data.get("api_id")
    api_hash = data.get("api_hash")

    set_telegram_account(user.id, api_id, api_hash, phone)

    try:
        result = await start_user_client(user.id)
        if result == 'awaiting_code':
            await message.answer("üì© –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞:")
            await state.set_state(ListenerSetup.waiting_code)
        else:
            await message.answer("‚úÖ –°–ª—É—à–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω.", reply_markup=get_listener_menu())
            await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", reply_markup=get_listener_menu())
        await state.clear()


@dp.message(ListenerSetup.waiting_code)
async def set_auth_code(message: Message, state: FSMContext):
    code = message.text.strip()
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    try:
        result = await start_user_client(user.id, code=code)
        if result == 'ok':
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª—É—à–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω.", reply_markup=get_listener_menu())
        else:
            await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_listener_menu())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ –∫–æ–¥—É: {e}", reply_markup=get_listener_menu())

    await state.clear()
@dp.message(SourceAddState.waiting_for_chat_id)
async def process_chat_id_input(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    try:
        chat_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞.")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer(
            "‚ö†Ô∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ª—É—à–∞—Ç–µ–ª—è")
        await state.clear()
        return

    try:
        me = await client.get_me()
        await client.get_permissions(chat_id, me.id)
    except Exception:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ª—É—à–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
        await state.clear()
        return

    title = await fetch_channel_title(chat_id, client)
    if add_channel(chat_id, user.id, title):
        await add_channel_listener(chat_id, client)
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª `{chat_id}` ({title}) –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_sources_menu(),
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è –ö–∞–Ω–∞–ª `{chat_id}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_sources_menu(),
            parse_mode="Markdown"
        )

    await state.clear()


# –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
async def show_source_removal_menu(query: CallbackQuery, user):
    channels = get_active_channels(user.id)
    if not channels:
        await query.message.edit_text("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                      reply_markup=get_sources_menu())
        await query.answer()
        return

    keyboard = [
        [InlineKeyboardButton(
            text=f"{ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ({ch.chat_id}) ‚ùå",
            callback_data=f"remove_source_{ch.chat_id}"
        )] for ch in channels
    ]
    keyboard.append(
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_sources")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await query.message.edit_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                  reply_markup=markup)
    await query.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
async def handle_source_removal(query: CallbackQuery, user, chat_id: int):
    remove_channel_by_id(chat_id, user.id)
    await remove_channel_listener(chat_id)

    channels = get_active_channels(user.id)
    if not channels:
        await query.message.edit_text(
            "‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.\n‚ùå –ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
            reply_markup=get_sources_menu())
    else:
        keyboard = [
            [InlineKeyboardButton(
                text=f"{ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ({ch.chat_id}) ‚ùå",
                callback_data=f"remove_source_{ch.chat_id}"
            )] for ch in channels
        ]
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                              callback_data="menu_sources")])
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await query.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.",
                                      reply_markup=markup)

    await query.answer()


@dp.message(Command("add_channel"))
async def cmd_add_channel(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer(
            "‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /auth.")
        return

    try:
        me = await client.get_me()
        await client.get_permissions(chat_id, me.id)
    except Exception as e:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª. "
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –Ω–µ–º")
        return

    title = await fetch_channel_title(chat_id, client)

    if add_channel(chat_id, user.id, title=title):
        await add_channel_listener(chat_id, client)
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.message(Command("remove_channel"))
async def cmd_remove_channel(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    remove_channel_by_id(chat_id, user.id)
    await remove_channel_listener(chat_id)
    await message.answer(f"üóë –ö–∞–Ω–∞–ª {chat_id} —É–¥–∞–ª—ë–Ω.")


@dp.message(Command("list_channels"))
async def cmd_list_channels(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    channels = get_active_channels(user.id)
    if not channels:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(
        f"‚Ä¢ {ch.chat_id} ({ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'})" for ch in channels
    )
    await message.answer(text)


@dp.message(Command("add_target_channel"))
async def cmd_add_target_channel(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer(
            "‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /auth.")
        return

    title = await fetch_channel_title(chat_id, client)

    if add_target_channel(chat_id, user.id, title=title):
        await message.answer(f"‚úÖ –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.message(Command("remove_target_channel"))
async def cmd_remove_target_channel(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    remove_target_channel(chat_id, user.id)
    await message.answer(f"üóë –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id} —É–¥–∞–ª—ë–Ω.")


@dp.message(Command("list_target_channels"))
async def cmd_list_target_channels(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    channels = get_target_channels(user.id)
    if not channels:
        await message.answer("‚ùå –ù–µ—Ç —Ç–∞—Ä–≥–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    text = "üéØ –¢–∞—Ä–≥–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(
        f"‚Ä¢ {ch.chat_id} ({ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'})" for ch in channels
    )
    await message.answer(text)


@dp.message(Command("add_target_tag"))
async def cmd_add_target_tag(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ —Ç–µ–≥!")
        return

    try:
        chat_id = int(args[1])
        tag_name = args[2]
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    if add_tag_to_target_channel(chat_id, user.id, tag_name):
        await message.answer(f"‚úÖ –¢–µ–≥ '{tag_name}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–Ω–∞–ª—É {chat_id}.")
    else:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥.")


@dp.message(Command("remove_target_tag"))
async def cmd_remove_target_tag(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ —Ç–µ–≥!")
        return

    try:
        chat_id = int(args[1])
        tag_name = args[2]
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    if remove_tag_from_target_channel(chat_id, user.id, tag_name):
        await message.answer(f"üóë –¢–µ–≥ '{tag_name}' —É–¥–∞–ª—ë–Ω —É –∫–∞–Ω–∞–ª–∞ {chat_id}.")
    else:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥.")


@dp.message(Command("list_target_tags"))
async def cmd_list_target_tags(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    tags = get_tags_for_target_channel(chat_id, user.id)
    if not tags:
        await message.answer(f"‚ùå –£ –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ—Ç —Ç–µ–≥–æ–≤.")
        return

    text = "üè∑ –¢–µ–≥–∏ –∫–∞–Ω–∞–ª–∞:\n" + "\n".join(f"‚Ä¢ {tag.name}" for tag in tags)
    await message.answer(text)


@dp.message(Command("list_tags"))
async def cmd_list_tags(message: Message):
    tags = get_all_tags()
    if not tags:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤.")
        return

    text = "üè∑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏:\n" + "\n".join(f"‚Ä¢ {tag.name}" for tag in tags)
    await message.answer(text, parse_mode="Markdown")


@dp.message(Command("set_rewrite_prompt"))
async def cmd_set_rewrite_prompt(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º—Ç–∞!")
        return

    try:
        chat_id = int(args[1])
        prompt = args[2]
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    if set_rewrite_prompt(chat_id, user.id, prompt):
        await message.answer(f"‚úÖ –ü—Ä–æ–º—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command("get_rewrite_prompt"))
async def cmd_get_rewrite_prompt(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    prompt = get_rewrite_prompt(chat_id, user.id)
    if prompt:
        await message.answer(f"üìú –ü—Ä–æ–º—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}:\n\n{prompt}")
    else:
        await message.answer(f"‚ÑπÔ∏è –ü—Ä–æ–º—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


@dp.message(Command("code"))
async def cmd_code(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    code = message.text.split(maxsplit=1)[1] if len(
        message.text.split()) > 1 else None

    if not code:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ Telegram.")
        return

    try:
        result = await start_user_client(user.id, code=code)
        if result == 'ok':
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {e}")


@dp.message(Command("set_listener"))
async def cmd_set_listener(message: Message):
    args = message.text.split(maxsplit=4)
    if len(args) < 4:
        await message.answer(
            "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /set_listener <api_id> <api_hash> <phone>")
        return
    print(1)
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    print(1)
    try:
        api_id = int(args[1])
        api_hash = args[2]
        phone = args[3]
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    print(1)
    set_telegram_account(user.id, api_id, api_hash, phone)
    print(1)
    try:
        result = await start_user_client(user.id)
        if result == 'awaiting_code':
            await message.answer(
                "üì© –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:\n`/code <–≤–∞—à_–∫–æ–¥>`",
                parse_mode="Markdown")
        else:
            await message.answer("‚úÖ –°–ª—É—à–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª—É—à–∞—Ç–µ–ª—è: {e}")


@dp.message(Command("get_listener"))
async def cmd_get_listener(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    account = get_telegram_account(user.id)
    if not account:
        await message.answer("‚ùå –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer("‚ö†Ô∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /set_listener.")
        return

    try:
        dialogs = await client.get_dialogs()
        channels = [
            dialog for dialog in dialogs
            if getattr(dialog.entity, "megagroup", False)
               or getattr(dialog.entity, "broadcast", False)
        ]

        if not channels:
            await message.answer("‚ÑπÔ∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ.")
            return

        text = (
                f"üë§ –¢–µ–∫—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å:\n"
                f"‚Ä¢ ID: {user.telegram_id}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {account.phone}\n"
                f"üì° –ö–∞–Ω–∞–ª—ã:\n"
                + "\n".join(
            f"‚Ä¢ `{ch.entity.id}` ‚Äî {ch.name}" for ch in channels)
        )

        await message.answer(text)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")


@dp.message(Command("set_include_image"))
async def cmd_set_include_image(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ 'yes' –∏–ª–∏ 'no'!")
        return

    try:
        chat_id = int(args[1])
        include = args[2].lower() == "yes"
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    if set_include_image(chat_id, user.id, include):
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {chat_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {'–¥–∞' if include else '–Ω–µ—Ç'}.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")


@dp.message(Command("get_include_image"))
async def cmd_get_include_image(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    include = get_include_image(chat_id, user.id)
    if include is None:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    elif include:
        await message.answer(
            f"üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} –≤–∫–ª—é—á–µ–Ω–∞.")
    else:
        await message.answer(
            f"üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞.")


@dp.message(Command("set_image_prompt"))
async def cmd_set_image_prompt(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ –ø—Ä–æ–º—Ç!")
        return

    try:
        chat_id = int(args[1])
        prompt = args[2]
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    if set_image_prompt(chat_id, user.id, prompt):
        await message.answer(f"‚úÖ –ü—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command("get_image_prompt"))
async def cmd_get_image_prompt(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    prompt = get_image_prompt(chat_id, user.id)
    if prompt:
        await message.answer(
            f"üñº –ü—Ä–æ–º—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}:\n\n{prompt}")
    else:
        await message.answer(f"‚ÑπÔ∏è –ü—Ä–æ–º—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω.")
