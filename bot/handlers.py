from aiogram.filters import Command
from aiogram.types import Message

from client.client_instance import client
from .bot_instance import dp
from db.utils import add_channel, remove_channel_by_id, get_active_channels, \
    fetch_channel_title, remove_tag_from_target_channel, \
    add_tag_to_target_channel, get_target_channels, remove_target_channel, \
    add_target_channel, get_tags_for_target_channel, get_all_tags
from client.listeners import add_channel_listener, remove_channel_listener


@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "ü§ñ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!* –í–æ—Ç —á—Ç–æ —è —É–º–µ—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n"

        "üì• *–†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:*\n"
        "‚Ä¢ `/add_channel <chat_id>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ `/remove_channel <chat_id>` ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ `/list_channels` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏\n\n"

        "üéØ *–†–∞–±–æ—Ç–∞ —Å —Ç–∞—Ä–≥–µ—Ç–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏:*\n"
        "‚Ä¢ `/add_target_channel <chat_id>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ `/remove_target_channel <chat_id>` ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ `/list_target_channels` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞—Ä–≥–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã\n\n"

        "üè∑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏ —Ç–∞—Ä–≥–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:*\n"
        "‚Ä¢ `/add_target_tag <chat_id> <—Ç–µ–≥>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π —Ç–µ–≥ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ `/remove_target_tag <chat_id> <—Ç–µ–≥>` ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –∏–∑ —Ç–∞—Ä–≥–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ `/list_target_tags <chat_id>` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–≥–∏, —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞\n\n"

        "üè∑ *–†–∞–±–æ—Ç–∞ —Å —Ç–µ–≥–∞–º–∏ –≤ –±–∞–∑–µ:*\n"
        "‚Ä¢ `/list_tags` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏\n\n"

        "‚öôÔ∏è *–ü—Ä–æ—á–µ–µ:*\n"
        "‚Ä¢ –ü–æ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î\n"
        "‚Ä¢ –¢–µ–≥–∏ –ø–æ—Å—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–ø–æ–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ)\n"
        "‚Ä¢ –ü–æ—Å—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ —Ç–∞—Ä–≥–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ—Å–ª–µ —Ä–µ—Ä–∞–π—Ç–∞ (–ø–æ–∫–∞ –º–æ–∫ '—Ä–µ—Ä–∞–π—Ç GPT')\n\n"

        "‚ÑπÔ∏è *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è!*"
    )
    await message.answer(text, parse_mode="Markdown")


@dp.message(Command("add_channel"))
async def cmd_add_channel(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    title = await fetch_channel_title(chat_id)

    if not add_channel(chat_id, title=title):
        await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {chat_id} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        return

    # üí• –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    if not client.is_connected():
        await client.connect()

    # üí• –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª –≤ Telethon —Å–µ—Å—Å–∏—é
    await client.get_entity(chat_id)

    # –¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
    await add_channel_listener(chat_id)

    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω.")


@dp.message(Command("remove_channel"))
async def cmd_remove_channel(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    remove_channel_by_id(chat_id)
    await remove_channel_listener(chat_id)
    await message.answer(f"üóë –ö–∞–Ω–∞–ª {chat_id} —É–¥–∞–ª—ë–Ω.")


@dp.message(Command("list_channels"))
async def cmd_list_channels(message: Message):
    channels = get_active_channels()
    if not channels:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:" + "\n".join(
        f"‚Ä¢ {ch.chat_id}" for ch in channels)
    await message.answer(text)


@dp.message(Command("add_target_channel"))
async def cmd_add_target_channel(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    if add_target_channel(chat_id):
        await message.answer(f"‚úÖ –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.message(Command("remove_target_channel"))
async def cmd_remove_target_channel(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    remove_target_channel(chat_id)
    await message.answer(f"üóë –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat_id} —É–¥–∞–ª—ë–Ω.")


@dp.message(Command("list_target_channels"))
async def cmd_list_target_channels(message: Message):
    channels = get_target_channels()
    if not channels:
        await message.answer("‚ùå –ù–µ—Ç —Ç–∞—Ä–≥–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    text = "üéØ –¢–∞—Ä–≥–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(
        f"‚Ä¢ {ch.chat_id} ({ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'})" for ch in channels)
    await message.answer(text)


@dp.message(Command("add_target_tag"))
async def cmd_add_target_tag(message: Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞!")
        return

    try:
        chat_id = int(args[1])
        tag_name = args[2]
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    if add_tag_to_target_channel(chat_id, tag_name):
        await message.answer(f"‚úÖ –¢–µ–≥ '{tag_name}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–Ω–∞–ª—É {chat_id}.")
    else:
        await message.answer(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.message(Command("remove_target_tag"))
async def cmd_remove_target_tag(message: Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞!")
        return

    try:
        chat_id = int(args[1])
        tag_name = args[2]
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    if remove_tag_from_target_channel(chat_id, tag_name):
        await message.answer(f"üóë –¢–µ–≥ '{tag_name}' —É–¥–∞–ª—ë–Ω —É –∫–∞–Ω–∞–ª–∞ {chat_id}.")
    else:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥.")


@dp.message(Command("list_target_tags"))
async def cmd_list_target_tags(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞!")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id!")
        return

    tags = get_tags_for_target_channel(chat_id)
    if not tags:
        await message.answer(f"‚ùå –£ –∫–∞–Ω–∞–ª–∞ {chat_id} –Ω–µ—Ç —Ç–µ–≥–æ–≤.")
        return

    text = "üè∑ –¢–µ–≥–∏ –∫–∞–Ω–∞–ª–∞:\n" + "\n".join(f"‚Ä¢ {tag.name}" for tag in tags)
    await message.answer(text)


@dp.message(Command("list_tags"))
async def cmd_list_tags(message: Message):
    tags = get_all_tags()
    if not tags:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤.")
        return

    text = "üè∑ *–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏:*\n" + "\n".join(
        f"‚Ä¢ {tag.name}" for tag in tags)
    await message.answer(text, parse_mode="Markdown")
