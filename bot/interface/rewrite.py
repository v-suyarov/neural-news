from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from db.utils import get_target_channels, get_or_create_user, get_rewrite_prompt, set_rewrite_prompt
from bot.bot_instance import dp

class RewriteFSM(StatesGroup):
    waiting_channel_id = State()
    waiting_prompt = State()


def get_rewrite_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="rewrite_list")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])


async def handle_menu_rewrite(query: CallbackQuery):
    await query.message.edit_text("‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞:", reply_markup=get_rewrite_menu())
    await query.answer()


async def handle_rewrite_list(query: CallbackQuery, user):
    channels = get_target_channels(user.id)
    if not channels:
        await query.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", reply_markup=get_rewrite_menu())
        await query.answer()
        return

    keyboard = [
        [InlineKeyboardButton(
            text=f"{ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ({ch.chat_id})",
            callback_data=f"rewrite_config_{ch.chat_id}"
        )] for ch in channels
    ]
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_rewrite")])
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await query.answer()


async def handle_rewrite_config(query: CallbackQuery | Message, user, data: str):
    print("handle_rewrite_config")
    chat_id = int(data.replace("rewrite_config_", ""))
    prompt = get_rewrite_prompt(chat_id, user.id)

    channel = next(
        (ch for ch in get_target_channels(user.id) if ch.chat_id == chat_id),
        None)
    title = channel.title if channel and channel.title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    text = f"üìú –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç –¥–ª—è `{chat_id}` ‚Äî *{title}*:\n\n"
    text += prompt if prompt else "‚ÑπÔ∏è –ù–µ –∑–∞–¥–∞–Ω."

    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"rewrite_set_{chat_id}")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data=f"rewrite_clear_{chat_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rewrite_list")]
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if isinstance(query, CallbackQuery):
        await query.message.edit_text(text, reply_markup=markup, parse_mode="Markdown")
        await query.answer()
    else:
        await query.answer(text, reply_markup=markup, parse_mode="Markdown")



async def handle_rewrite_set(query: CallbackQuery, state: FSMContext, data: str):
    chat_id = int(data.replace("rewrite_set_", ""))
    await state.update_data(chat_id=chat_id)
    await state.set_state(RewriteFSM.waiting_prompt)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"rewrite_config_{chat_id}")]
    ])

    await query.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ `{chat_id}`:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await query.answer()


@dp.message(RewriteFSM.waiting_prompt)
async def process_new_prompt(message: Message, state: FSMContext):
    print("process_new_prompt")
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    data = await state.get_data()
    chat_id = data.get("chat_id")
    prompt = message.text.strip()

    if set_rewrite_prompt(chat_id, user.id, prompt):
        # 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
        await message.answer(f"‚úÖ –ü—Ä–æ–º—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ `{chat_id}`.", parse_mode="Markdown")

        # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        await handle_rewrite_config(message, user, f"rewrite_config_{chat_id}")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º—Ç.")

    await state.clear()


async def handle_rewrite_clear(query: CallbackQuery, user, data: str):
    chat_id = int(data.replace("rewrite_clear_", ""))
    set_rewrite_prompt(chat_id, user.id, "")

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ
    await query.message.answer(
        f"üßπ –ü—Ä–æ–º—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ `{chat_id}` –æ—á–∏—â–µ–Ω.",
        parse_mode="Markdown"
    )

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await handle_rewrite_config(query.message, user, f"rewrite_config_{chat_id}")

    await query.answer()