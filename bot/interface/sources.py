from aiogram.types import CallbackQuery, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from db.utils import get_active_channels
from client.listeners import remove_channel_listener
from db.utils import remove_channel_by_id
from aiogram.fsm.state import State, StatesGroup


class SourceAddState(StatesGroup):
    waiting_for_chat_id = State()


def get_sources_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                              callback_data="source_add")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",
                              callback_data="source_remove")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",
                              callback_data="source_list")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])


async def handle_menu_sources(query: CallbackQuery):
    await query.message.edit_text("üì• –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:",
                                  reply_markup=get_sources_menu())
    await query.answer()


async def handle_source_list(query: CallbackQuery, user):
    channels = get_active_channels(user.id)
    if not channels:
        text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n" + "\n".join(
            f"‚Ä¢ `{ch.chat_id}` ‚Äî {ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" for ch in
            channels
        )
    await query.message.edit_text(text, reply_markup=get_sources_menu(),
                                  parse_mode="Markdown")
    await query.answer()


async def handle_source_add(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è üì•\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç—É–¥–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∏ –æ–Ω –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                     callback_data="menu_sources"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                     callback_data="menu_main")
            ]
        ])
    )
    await state.set_state(SourceAddState.waiting_for_chat_id)
    await query.answer()


async def handle_source_remove(query: CallbackQuery, user):
    channels = get_active_channels(user.id)
    if not channels:
        await query.message.edit_text("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                      reply_markup=get_sources_menu())
        await query.answer()
        return

    keyboard = [
        [InlineKeyboardButton(
            text=f"{ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ({ch.chat_id}) ‚ùå",
            callback_data=f"remove_source_{ch.chat_id}"
        )] for ch in channels
    ]
    keyboard.append(
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_sources")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await query.message.edit_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                  reply_markup=markup)
    await query.answer()


async def handle_source_delete_by_id(query: CallbackQuery, user, data: str):
    try:
        chat_id = int(data.replace("remove_source_", ""))
    except ValueError:
        await query.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π chat_id")
        return

    remove_channel_by_id(chat_id, user.id)
    await remove_channel_listener(chat_id)

    channels = get_active_channels(user.id)
    if not channels:
        await query.message.edit_text(
            "‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.\n‚ùå –ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
            reply_markup=get_sources_menu()
        )
    else:
        keyboard = [
            [InlineKeyboardButton(
                text=f"{ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ({ch.chat_id}) ‚ùå",
                callback_data=f"remove_source_{ch.chat_id}"
            )] for ch in channels
        ]
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                              callback_data="menu_sources")])
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await query.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.", reply_markup=markup)

    await query.answer()
