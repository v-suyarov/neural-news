from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from client.client_manager import start_user_client, get_user_client
from db.utils import get_or_create_user, get_telegram_account, \
    set_telegram_account
from bot.bot_instance import dp


class ListenerSetup(StatesGroup):
    waiting_api_id = State()
    waiting_api_hash = State()
    waiting_phone = State()
    waiting_code = State()


def get_listener_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è",
                              callback_data="listener_show")],
        [InlineKeyboardButton(text="‚ûï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è",
                              callback_data="listener_set")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])


@dp.message(Command("set_listener"))
async def cmd_set_listener(message: Message):
    args = message.text.split(maxsplit=4)
    if len(args) < 4:
        await message.answer(
            "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /set_listener <api_id> <api_hash> <phone>")
        return
    print(1)
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    print(1)
    try:
        api_id = int(args[1])
        api_hash = args[2]
        phone = args[3]
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    print(1)
    set_telegram_account(user.id, api_id, api_hash, phone)
    print(1)
    try:
        result = await start_user_client(user.id)
        if result == 'awaiting_code':
            await message.answer(
                "üì© –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:\n`/code <–≤–∞—à_–∫–æ–¥>`",
                parse_mode="Markdown")
        else:
            await message.answer("‚úÖ –°–ª—É—à–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª—É—à–∞—Ç–µ–ª—è: {e}")


@dp.message(Command("get_listener"))
async def cmd_get_listener(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    account = get_telegram_account(user.id)
    if not account:
        await message.answer("‚ùå –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer("‚ö†Ô∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /set_listener.")
        return

    try:
        dialogs = await client.get_dialogs()
        channels = [
            dialog for dialog in dialogs
            if getattr(dialog.entity, "megagroup", False)
               or getattr(dialog.entity, "broadcast", False)
        ]

        if not channels:
            await message.answer("‚ÑπÔ∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ.")
            return

        text = (
                f"üë§ –¢–µ–∫—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å:\n"
                f"‚Ä¢ ID: {user.telegram_id}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {account.phone}\n"
                f"üì° –ö–∞–Ω–∞–ª—ã:\n"
                + "\n".join(
            f"‚Ä¢ `{ch.entity.id}` ‚Äî {ch.name}" for ch in channels)
        )

        await message.answer(text)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")


@dp.message(Command("code"))
async def cmd_code(message: Message):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)
    code = message.text.split(maxsplit=1)[1] if len(
        message.text.split()) > 1 else None

    if not code:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ Telegram.")
        return

    try:
        result = await start_user_client(user.id, code=code)
        if result == 'ok':
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {e}")


@dp.message(ListenerSetup.waiting_api_id)
async def set_api_id(message: Message, state: FSMContext):
    try:
        api_id = int(message.text.strip())
        await state.update_data(api_id=api_id)
        await state.set_state(ListenerSetup.waiting_api_hash)
        await message.answer("‚úÖ API ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ `api_hash`:",
                             parse_mode="Markdown")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@dp.message(ListenerSetup.waiting_api_hash)
async def set_api_hash(message: Message, state: FSMContext):
    await state.update_data(api_hash=message.text.strip())
    await state.set_state(ListenerSetup.waiting_phone)
    await message.answer(
        "üìû –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...",
        parse_mode="Markdown")


@dp.message(ListenerSetup.waiting_phone)
async def set_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    data = await state.get_data()
    api_id = data.get("api_id")
    api_hash = data.get("api_hash")

    set_telegram_account(user.id, api_id, api_hash, phone)

    try:
        result = await start_user_client(user.id)
        if result == 'awaiting_code':
            await message.answer(
                "üì© –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞:")
            await state.set_state(ListenerSetup.waiting_code)
        else:
            await message.answer("‚úÖ –°–ª—É—à–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω.",
                                 reply_markup=get_listener_menu())
            await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}",
                             reply_markup=get_listener_menu())
        await state.clear()


@dp.message(ListenerSetup.waiting_code)
async def set_auth_code(message: Message, state: FSMContext):
    code = message.text.strip()
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    try:
        result = await start_user_client(user.id, code=code)
        if result == 'ok':
            await message.answer(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª—É—à–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω.",
                reply_markup=get_listener_menu())
        else:
            await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                 reply_markup=get_listener_menu())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ –∫–æ–¥—É: {e}",
                             reply_markup=get_listener_menu())

    await state.clear()


async def show_listener_menu(query: CallbackQuery):
    await query.message.edit_text(
        "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_listener_menu()
    )
    await query.answer()


async def handle_listener_set(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "üõ† –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º —Å–ª—É—à–∞—Ç–µ–ª—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à `api_id`:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="menu_listener")]
        ]),
        parse_mode="Markdown"
    )
    await state.set_state(ListenerSetup.waiting_api_id)
    await query.answer()


async def handle_listener_show(query: CallbackQuery, user):
    account = get_telegram_account(user.id)
    client = get_user_client(user.id)

    if not account:
        await query.message.edit_text("‚ùå –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.",
                                      reply_markup=get_listener_menu())
        await query.answer()
        return

    if not client:
        await query.message.edit_text(
            "‚ö†Ô∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_listener_menu())
        await query.answer()
        return

    try:
        dialogs = await client.get_dialogs()
        channels = [
            dialog for dialog in dialogs
            if getattr(dialog.entity, "megagroup", False) or getattr(
                dialog.entity, "broadcast", False)
        ]

        text = (
                f"üë§ –¢–µ–∫—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å:\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: `{account.phone}`\n"
                f"üì° –ö–∞–Ω–∞–ª—ã:\n"
                + "\n".join(
            f"‚Ä¢ `{ch.entity.id}` ‚Äî {ch.name}" for ch in channels)
        )
        await query.message.edit_text(text,
                                      reply_markup=get_listener_menu(),
                                      parse_mode="Markdown")

    except Exception as e:
        await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}",
                                      reply_markup=get_listener_menu())
    await query.answer()
