from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, \
    InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext

from bot.bot_instance import dp
from db.utils import (
    get_all_tags, get_target_channels,
    get_tags_for_target_channel, remove_tag_from_target_channel,
    get_or_create_user, add_tag_to_target_channel
)


class TagManagement(StatesGroup):
    waiting_channel_id_for_add = State()
    waiting_tag_name_for_add = State()
    waiting_channel_id_for_remove = State()
    waiting_tag_name_for_remove = State()
    waiting_channel_id_for_list = State()
    waiting_tag_name_to_add = State()
    waiting_tag_name_to_remove = State()


def get_tags_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—Å–µ —Ç–µ–≥–∏", callback_data="tags_all")],
        [InlineKeyboardButton(text="üì¶ –¢–µ–≥–∏ –∫–∞–Ω–∞–ª–∞",
                              callback_data="tags_of_channel")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])


async def handle_menu_tags(query: CallbackQuery):
    await query.message.edit_text("üè∑ –†–∞–±–æ—Ç–∞ —Å —Ç–µ–≥–∞–º–∏:",
                                  reply_markup=get_tags_menu())
    await query.answer()


async def handle_tags_all(query: CallbackQuery):
    tags = get_all_tags()
    if not tags:
        text = "‚ùå –ù–µ—Ç —Ç–µ–≥–æ–≤."
    else:
        text = "üè∑ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n" + "\n".join(
            f"‚Ä¢ {t.name}" for t in tags)
    await query.message.edit_text(text, reply_markup=get_tags_menu())
    await query.answer()


async def handle_tags_of_channel(query: CallbackQuery, user):
    channels = get_target_channels(user.id)
    if not channels:
        current_text = query.message.text or ""
        new_text = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
        if current_text.strip() != new_text.strip():
            await query.message.edit_text(new_text,
                                          reply_markup=get_tags_menu())
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ—Ç –∂–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º reply_markup (–∏–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    keyboard = [
        [InlineKeyboardButton(
            text=f"{ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ({ch.chat_id})",
            callback_data=f"show_tags_{ch.chat_id}"
        )] for ch in channels
    ]
    keyboard.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_tags")])

    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:",
                                  reply_markup=InlineKeyboardMarkup(
                                      inline_keyboard=keyboard))
    await query.answer()


async def handle_tags_show_channel(query: CallbackQuery, user, data: str):
    try:
        chat_id = int(data.replace("show_tags_", ""))
    except ValueError:
        await query.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π chat_id.")
        return

    tags = get_tags_for_target_channel(chat_id, user.id)
    tags_text = "\n".join(
        f"‚Ä¢ {tag.name}" for tag in tags) if tags else "–ù–µ—Ç —Ç–µ–≥–æ–≤."

    text = (
        f"üè∑ –¢–µ–≥–∏ –∫–∞–Ω–∞–ª–∞ `{chat_id}`:\n"
        f"{tags_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥",
                              callback_data=f"tag_add_{chat_id}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥",
                              callback_data=f"tag_remove_{chat_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                              callback_data="tags_of_channel")]
    ])

    await query.message.edit_text(text, reply_markup=keyboard,
                                  parse_mode="Markdown")
    await query.answer()


async def handle_tag_add_start(query: CallbackQuery, state: FSMContext,
                               data: str):
    chat_id = int(data.replace("tag_add_", ""))
    await state.update_data(tag_op_chat_id=chat_id)

    telegram_id = query.from_user.id
    user = get_or_create_user(telegram_id)

    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    existing_tags = get_tags_for_target_channel(chat_id, user.id)
    existing_tag_ids = {tag.id for tag in existing_tags}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_tags = get_all_tags()
    available_tags = [tag for tag in all_tags if tag.id not in existing_tag_ids]

    if not available_tags:
        await query.message.edit_text(
            "‚úÖ –£ –∫–∞–Ω–∞–ª–∞ —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                      callback_data=f"show_tags_{chat_id}")]
            ])
        )
        await query.answer()
        return

    keyboard = [
        [InlineKeyboardButton(text=tag.name,
                              callback_data=f"tag_pick_{chat_id}_{tag.id}")]
        for tag in available_tags
    ]
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                          callback_data=f"show_tags_{chat_id}")])

    await query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª `{chat_id}`:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await query.answer()


async def handle_tag_pick(query: CallbackQuery, user, data: str):
    try:
        chat_id_str, tag_id_str = data.replace("tag_pick_", "").split("_")
        chat_id = int(chat_id_str)
        tag_id = int(tag_id_str)
    except Exception:
        await query.message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        await query.answer()
        return

    from db.session import Session
    from db.models import TargetChannel, TargetChannelTag, Tag

    with Session() as session:
        target = session.query(TargetChannel).filter_by(
            chat_id=chat_id, user_id=user.id
        ).first()
        tag = session.query(Tag).filter_by(id=tag_id).first()

        if not target or not tag:
            await query.message.answer("‚ùå –ö–∞–Ω–∞–ª –∏–ª–∏ —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        exists = session.query(TargetChannelTag).filter_by(
            target_channel_id=target.id, tag_id=tag.id
        ).first()
        if exists:
            await query.message.answer("‚ö†Ô∏è –¢–µ–≥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            await show_channel_tags(chat_id, user, query.message)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        tag_name = tag.name

        session.add(TargetChannelTag(target_channel_id=target.id, tag_id=tag.id))
        session.commit()

    # 1. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await query.message.answer(
        f"‚úÖ –¢–µ–≥ `{tag_name}` –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–Ω–∞–ª—É `{chat_id}`.",
        parse_mode="Markdown"
    )

    # 2. –ù–æ–≤—ã–π –±–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏
    await show_channel_tags(chat_id, user, query.message)

    await query.answer()




async def handle_tag_remove_start(query: CallbackQuery, user, data: str):
    chat_id = int(data.replace("tag_remove_", ""))
    tags = get_tags_for_target_channel(chat_id, user.id)

    if not tags:
        await query.message.edit_text("‚ùå –£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤.",
                                      reply_markup=get_tags_menu())
        await query.answer()
        return

    keyboard = [
        [InlineKeyboardButton(
            text=f"{tag.name} ‚ùå",
            callback_data=f"tag_delete_{chat_id}_{tag.name}"
        )] for tag in tags
    ]
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                          callback_data=f"show_tags_{chat_id}")])

    await query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ `{chat_id}`:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await query.answer()


async def handle_tag_delete(query: CallbackQuery, user, data: str):
    try:
        chat_id_str, tag_name = data[len("tag_delete_"):].split("_", 1)
        chat_id = int(chat_id_str)
    except Exception:
        await query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback.")
        await query.answer()
        return

    if remove_tag_from_target_channel(chat_id, user.id, tag_name):
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        await query.message.answer(
            f"üóë –¢–µ–≥ `{tag_name}` —É–¥–∞–ª—ë–Ω —É –∫–∞–Ω–∞–ª–∞ `{chat_id}`.",
            parse_mode="Markdown"
        )

        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_channel_tags(chat_id, user, query.message)
    else:
        await query.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥.")

    await query.answer()


async def handle_tags_add_manual(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="menu_tags")]
        ]))
    await state.set_state(TagManagement.waiting_channel_id_for_add)
    await query.answer()


async def handle_tags_remove_manual(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="menu_tags")]
        ]))
    await state.set_state(TagManagement.waiting_channel_id_for_remove)
    await query.answer()


@dp.message(TagManagement.waiting_channel_id_for_list)
async def handle_tag_list(message: Message, state: FSMContext):
    try:
        chat_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π chat_id.")
        return

    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    tags = get_tags_for_target_channel(chat_id, user.id)
    if not tags:
        text = "‚ùå –£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤."
    else:
        text = "üè∑ –¢–µ–≥–∏ –∫–∞–Ω–∞–ª–∞:\n" + "\n".join(f"‚Ä¢ {t.name}" for t in tags)
    print(1)
    await show_channel_tags(chat_id, user, message)
    await state.clear()


@dp.message(TagManagement.waiting_channel_id_for_add)
async def handle_add_tag_channel_id(message: Message, state: FSMContext):
    try:
        chat_id = int(message.text.strip())
        await state.update_data(add_tag_chat_id=chat_id)
        await state.set_state(TagManagement.waiting_tag_name_for_add)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–µ–≥–∞:")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π chat_id.")


@dp.message(TagManagement.waiting_tag_name_to_remove)
async def handle_remove_tag(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data.get("tag_op_chat_id")

    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    tag_name = message.text.strip()
    if remove_tag_from_target_channel(chat_id, user.id, tag_name):
        await message.answer(
            f"üóë –¢–µ–≥ `{tag_name}` —É–¥–∞–ª—ë–Ω —É –∫–∞–Ω–∞–ª–∞ `{chat_id}`.",
            parse_mode="Markdown"
        )
        await show_channel_tags(chat_id, user, message)
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥.")
    await state.clear()


async def show_channel_tags(chat_id: int, user, message_or_query):
    tags = get_tags_for_target_channel(chat_id, user.id)
    tags_text = "\n".join(
        f"‚Ä¢ {tag.name}" for tag in tags) if tags else "–ù–µ—Ç —Ç–µ–≥–æ–≤."

    text = (
        f"üè∑ –¢–µ–≥–∏ –∫–∞–Ω–∞–ª–∞ `{chat_id}`:\n"
        f"{tags_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥",
                              callback_data=f"tag_add_{chat_id}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥",
                              callback_data=f"tag_remove_{chat_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tags_of_channel")]
    ])

    if isinstance(message_or_query, CallbackQuery):
        await message_or_query.message.edit_text(text, reply_markup=keyboard,
                                                 parse_mode="Markdown")
    else:
        await message_or_query.answer(text, reply_markup=keyboard,
                                      parse_mode="Markdown")
