from aiogram.types import CallbackQuery, InlineKeyboardMarkup, \
    InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from db.utils import get_target_channels, remove_target_channel, \
    add_target_channel, get_or_create_user
from client.client_manager import get_user_client
from db.utils import fetch_channel_title
from aiogram.fsm.state import State, StatesGroup
from bot.bot_instance import dp


class TargetChannelSetup(StatesGroup):
    waiting_chat_id = State()


def get_target_channels_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="target_add")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="target_remove")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫", callback_data="target_list")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])


async def handle_menu_targets(query: CallbackQuery):
    await query.message.edit_text("üéØ –†–∞–±–æ—Ç–∞ —Å —Ç–∞—Ä–≥–µ—Ç–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏:",
                                  reply_markup=get_target_channels_menu())
    await query.answer()


async def handle_target_list(query: CallbackQuery, user):
    channels = get_target_channels(user.id)
    if not channels:
        text = "‚ùå –ù–µ—Ç —Ç–∞—Ä–≥–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
    else:
        text = "üéØ –¢–∞—Ä–≥–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(
            f"‚Ä¢ `{ch.chat_id}` ‚Äî {ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" for ch in
            channels
        )
    await query.message.edit_text(text,
                                  reply_markup=get_target_channels_menu(),
                                  parse_mode="Markdown")
    await query.answer()


async def handle_target_add(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞—Ä–≥–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:\n(–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç—É–¥–∞ –¥–æ—Å—Ç—É–ø)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="menu_targets")]
        ])
    )
    await state.set_state(TargetChannelSetup.waiting_chat_id)
    await query.answer()


async def handle_target_remove_menu(query: CallbackQuery, user):
    channels = get_target_channels(user.id)
    if not channels:
        await query.message.edit_text("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                      reply_markup=get_target_channels_menu())
        await query.answer()
        return

    keyboard = [
        [InlineKeyboardButton(
            text=f"{ch.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ({ch.chat_id}) ‚ùå",
            callback_data=f"remove_target_{ch.chat_id}"
        )] for ch in channels
    ]
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                          callback_data="menu_targets")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                  reply_markup=markup)
    await query.answer()


async def handle_target_remove_by_id(query: CallbackQuery, user, data: str):
    chat_id = int(data.replace("remove_target_", ""))
    remove_target_channel(chat_id, user.id)
    await query.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.",
                                  reply_markup=get_target_channels_menu())
    await query.answer()


async def handle_target_add_from_input(message, state: FSMContext, user):
    try:
        chat_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id.")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer("‚ö†Ô∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        await state.clear()
        return

    title = await fetch_channel_title(chat_id, client)
    if add_target_channel(chat_id, user.id, title=title):
        await message.answer(
            f"‚úÖ –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª `{chat_id}` ({title}) –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=get_target_channels_menu(), parse_mode="Markdown")
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                             reply_markup=get_target_channels_menu(),
                             parse_mode="Markdown")
    await state.clear()


@dp.message(TargetChannelSetup.waiting_chat_id)
async def add_target_channel_fsm(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    user = get_or_create_user(telegram_id)

    try:
        chat_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id.")
        return

    client = get_user_client(user.id)
    if not client:
        await message.answer("‚ö†Ô∏è –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        await state.clear()
        return

    title = await fetch_channel_title(chat_id, client)

    if add_target_channel(chat_id, user.id, title=title):
        await message.answer(
            f"‚úÖ –¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª `{chat_id}` ({title}) –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=get_target_channels_menu(), parse_mode="Markdown")
    else:
        await message.answer(f"‚ö†Ô∏è –¢–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å.",
                             reply_markup=get_target_channels_menu(),
                             parse_mode="Markdown")

    await state.clear()
